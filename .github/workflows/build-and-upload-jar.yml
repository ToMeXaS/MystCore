name: Build and Upload New JAR

on:
  push:
    branches:
      - main

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Git SHA
        id: git-info
        run: echo "sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Send Discord Webhook on Commit
        uses: ./.github/actions/discord-commit-webhook
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          sha: ${{ steps.git-info.outputs.sha }}

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: gradle/actions/setup-gradle@v4

      - run: chmod +x ./gradlew

      - name: Record start time
        id: start-time
        run: echo "start=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Build with Gradle
        run: ./gradlew build || tee build.log

      - name: Record end time
        id: end-time
        run: echo "end=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Calculate build duration
        id: build-duration
        run: echo "duration=$(( ${{ steps.end-time.outputs.end }} - ${{ steps.start-time.outputs.start }} ))" >> $GITHUB_OUTPUT

      - name: Get Jar file name
        id: get_jar
        run: |
          jar_name=$(ls artifacts/*.jar | head -n 1 | xargs -n 1 basename)
          echo "jar_name=$jar_name" >> $GITHUB_OUTPUT

      - name: Notify Success
        if: success()
        uses: ./.github/actions/discord-status-webhook
        with:
          status: "build_success"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          git_hash: ${{ steps.git-info.outputs.sha }}
          username: ${{ github.actor }}
          repo: ${{ github.repository }}
          branch: ${{ github.ref_name }}
          run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          jar_name: ${{ steps.get_jar.outputs.jar_name }}
          build_duration: ${{ steps.build-duration.outputs.duration }}

      - name: Notify Failure
        if: failure()
        uses: ./.github/actions/discord-status-webhook
        with:
          status: "build_failure"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          git_hash: ${{ steps.git-info.outputs.sha }}
          username: ${{ github.actor }}
          repo: ${{ github.repository }}
          branch: ${{ github.ref_name }}
          run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Add SFTP host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p $SFTP_PORT $SFTP_HOST >> ~/.ssh/known_hosts
        env:
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          SFTP_PORT: ${{ secrets.SFTP_PORT }}

      - name: Upload JAR to SFTP (with log)
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          set -o pipefail
          sshpass -p "$SFTP_PASS" sftp -v -P $SFTP_PORT $SFTP_USER@$SFTP_HOST <<EOF
          put artifacts/${{ steps.get_jar.outputs.jar_name }} /plugins
          bye
          EOF
          2>&1 | tee upload.log
        env:
          SFTP_USER: ${{ secrets.SFTP_USER }}
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          SFTP_PORT: ${{ secrets.SFTP_PORT }}
          SFTP_PASS: ${{ secrets.SFTP_PASS }}

      - name: Notify Success
        if: success()
        uses: ./.github/actions/discord-status-webhook
        with:
          status: "upload_success"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          git_hash: ${{ steps.git-info.outputs.sha }}
          username: ${{ github.actor }}
          repo: ${{ github.repository }}
          branch: ${{ github.ref_name }}
          run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Notify Failure
        if: failure()
        uses: ./.github/actions/discord-status-webhook
        with:
          status: "upload_failure"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          git_hash: ${{ steps.git-info.outputs.sha }}
          username: ${{ github.actor }}
          repo: ${{ github.repository }}
          branch: ${{ github.ref_name }}
          run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}