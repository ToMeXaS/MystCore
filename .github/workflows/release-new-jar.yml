name: Build and Upload New JAR

on:
  push:
    branches:
      - main

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Git SHA
        id: git-info
        run: echo "sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Send Discord Webhook on Commit
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GIT_HASH: ${{ steps.git-info.outputs.sha }}
          AUTHOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_URL="https://github.com/$REPO/commit/$GIT_HASH"
          COMMIT_MESSAGE="$(git log -1 --pretty=format:%B || echo "No commit message")"
          REPO_URL="https://github.com/$REPO"
          BRANCH_URL="https://github.com/$REPO/tree/$BRANCH"
          
          # Get changed files as a Bash array (short paths with URLs)
          mapfile -t CHANGED_FILES < <(git diff-tree --no-commit-id --name-only -r "$GIT_HASH" | head -n 20)
          if [ ${#CHANGED_FILES[@]} -eq 0 ]; then
          CHANGED_FILES_LIST="No files changed."
          else
          CHANGED_FILES_LIST=$(for f in "${CHANGED_FILES[@]}"; do
          fname=$(basename "$f")
          url="https://github.com/$REPO/blob/$GIT_HASH/$f"
          printf -- "- [%s](%s)\n" "$fname" "$url"
          done)
          fi

          json=$(jq -n \
          --arg title "📦 New Commit Pushed" \
          --arg repo "$REPO" \
          --arg repo_url "$REPO_URL" \
          --arg branch "$BRANCH" \
          --arg branch_url "$BRANCH_URL" \
          --arg commit "$GIT_HASH" \
          --arg commit_url "$COMMIT_URL" \
          --arg commit_message "$COMMIT_MESSAGE" \
          --arg author "$AUTHOR" \
          --arg timestamp "$TIMESTAMP" \
          --arg changed "$CHANGED_FILES_LIST" \
          '{
            embeds: [{
              title: $title,
              color: 3447003,
              timestamp: $timestamp,
              author: {
                name: $author,
                url: "https://github.com/\($author)",
                icon_url: "https://github.com/\($author).png"
              },
              fields: [
                { name: "Repository", value: "[\($repo)](\($repo_url))", inline: true },
                { name: "Branch", value: "[\($branch)](\($branch_url))", inline: true },
                { name: "Commit", value: "[\($commit)](\($commit_url))", inline: true },
                { name: "Changed Files", value: $changed, inline: false },
                { name: "Message", value: "```\($commit_message)```", inline: false }
              ],
              footer: { text: "Commit detected by GitHub Actions" }
            }]
          }')

          curl -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK_URL"

      - name: Record start time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: gradle/actions/setup-gradle@v4

      - run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Get Jar file name
        id: get_jar
        run: |
          jar_name=$(ls artifacts/*.jar | head -n 1 | xargs -n 1 basename)
          echo "jar_name=$jar_name" >> $GITHUB_OUTPUT

      - name: Upload JAR to SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.6
        with:
          username: ${{ secrets.SFTP_USER }}
          server: ${{ secrets.SFTP_HOST }}
          password: ${{ secrets.SFTP_PASS }}
          port: ${{ secrets.SFTP_PORT }}
          local_path: "artifacts/${{ steps.get_jar.outputs.jar_name }}"
          remote_path: "/plugins"
          sftp_only: true

      - name: Send Discord Webhook on Failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GIT_HASH: ${{ steps.git-info.outputs.sha }}
          AUTHOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_URL="https://github.com/$REPO/commit/$GIT_HASH"
          REPO_URL="https://github.com/$REPO"
          BRANCH_URL="https://github.com/$REPO/tree/$BRANCH"
          
          json=$(jq -n \
          --arg title "❌ Build Failed" \
          --arg repo "$REPO" \
          --arg repo_url "$REPO_URL" \
          --arg branch "$BRANCH" \
          --arg branch_url "$BRANCH_URL" \
          --arg commit "$GIT_HASH" \
          --arg commit_url "$COMMIT_URL" \
          --arg author "$AUTHOR" \
          --arg timestamp "$TIMESTAMP" \
          '{
            embeds: [
              {
                title: $title,
                color: 15158332,
                timestamp: $timestamp,
                author: {
                  name: $author,
                  url: ("https://github.com/\($author)"),
                  icon_url: ("https://github.com/\($author).png")
                },
                fields: [
                  { name: "Repository", value: "[\($repo)](\($repo_url))", inline: true },
                  { name: "Branch", value: "[\($branch)](\($branch_url))", inline: true },
                  { name: "Commit", value: "[\($commit)](\($commit_url))", inline: true }
                ],
                footer: {
                  text: "Failed Job via GitHub Actions"
                }
              }
            ]
          }')
  
          curl -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK_URL"

      - name: Send Discord Webhook on Success
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GIT_HASH: ${{ steps.git-info.outputs.sha }}
          AUTHOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          JAR_NAME: ${{ steps.get_jar.outputs.jar_name }}
          START_TIME: ${{ env.START_TIME }}
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_URL="https://github.com/$REPO/commit/$GIT_HASH"
          REPO_URL="https://github.com/$REPO"
          BRANCH_URL="https://github.com/$REPO/tree/$BRANCH"
          ARTIFACT_SIZE=$(stat -c%s "artifacts/$JAR_NAME" 2>/dev/null || echo "unknown")

          json=$(jq -n \
          --arg title "✅ Build and Upload Successful" \
          --arg author "$AUTHOR" \
          --arg repo "$REPO" --arg repo_url "$REPO_URL" \
          --arg branch "$BRANCH" --arg branch_url "$BRANCH_URL" \
          --arg commit "$GIT_HASH" --arg commit_url "$COMMIT_URL" \
          --arg jar "$JAR_NAME" \
          --arg size "$ARTIFACT_SIZE" --arg duration "${DURATION}s" \
          --arg timestamp "$TIMESTAMP" \
          '{
            embeds: [{
              title: $title,
              color: 3066993,
              timestamp: $timestamp,
              author: {
                name: $author,
                url: "https://github.com/\($author)",
                icon_url: "https://github.com/\($author).png"
              },
              fields: [
                { name: "Repository", value: "[\($repo)](\($repo_url))", inline: true },
                { name: "Branch", value: "[\($branch)](\($branch_url))", inline: true },
                { name: "Commit", value: "[\($commit)](\($commit_url))", inline: true },
                { name: "Jar File", value: "`\($jar)`", inline: true },
                { name: "Build Duration", value: "`\($duration)`", inline: true },
                {
                    name: "File Size",
                    value: ($size | tonumber as $size |
                      if $size < 1024 then
                      ("`" + ($size | tostring) + " bytes`")
                      elif $size < 1024 * 1024 then
                      ("`" + ((($size / 1024) | . * 100 | floor / 100) | tostring) + " KB`")
                      else
                      ("`" + ((($size / 1024 / 1024) | . * 100 | floor / 100) | tostring) + " MB`")
                      end),
                    inline: true
                  }
              ],
              footer: { text: "Built and uploaded via GitHub Actions" }
            }]
          }')
  
          curl -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK_URL"
