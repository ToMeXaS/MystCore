plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.gradleup.shadow' version '8.3.0'
}

group = 'lt.tomexas'
version = project.version

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.extendedclip.com/releases/"
    }
    maven {
        url = "https://repo.bg-software.com/repository/api/"
    }
    maven {
        url = "https://nexus.phoenixdevt.fr/repository/maven-public/"
    }
    maven { url 'https://mvn.lumine.io/repository/maven-public/' }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("com.bgsoftware:SuperiorSkyblockAPI:2025.1")
    compileOnly("net.Indyuce:MMOCore-API:1.12.1-SNAPSHOT")
    compileOnly("io.lumine:MythicLib-dist:1.6.2-SNAPSHOT")
    compileOnly("com.ticxo.modelengine:ModelEngine:R4.0.8")
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    implementation 'co.aikar:acf-paper:0.5.1-SNAPSHOT'
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }

    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = System.getProperty("java.home") + "/bin/javac.exe"
}

shadowJar {
    destinationDirectory = layout.projectDirectory.dir("artifacts")
    archiveFileName = "${project.name}.jar"
    relocate 'co.aikar.commands', 'lt.tomexas.acf'
    relocate 'co.aikar.locales', 'lt.tomexas.locales'
}

def bumpVersion(String version, String bump) {
    def parts = version.tokenize('.').collect { it as int }
    switch (bump) {
        case 'patch':
            parts[2]++
            break
        case 'minor':
            parts[1]++
            parts[2] = 0
            break
        case 'major':
            parts[0]++
            parts[1] = 0
            parts[2] = 0
            break
    }
    return parts.join('.')
}

def releaseAction = { bumpType ->
    def propsFile = rootProject.file("gradle.properties")
    def props = new Properties()
    props.load(propsFile.newInputStream())

    def currentVersion = props.getProperty("version") as String
    def newVersion = bumpVersion(currentVersion, bumpType)

    props['version'] = newVersion
    props.store(propsFile.newWriter(), null)

    // üß† Force update of in-memory project version
    project.version = newVersion

    // Update plugin.yml version
    def pluginYml = rootProject.file("src/main/resources/plugin.yml")
    if (pluginYml.exists()) {
        def lines = pluginYml.readLines("UTF-8")
        def updated = lines.collect { line ->
            line.replaceFirst(/^version:\s*.*/, "version: ${project.version}")
        }
        pluginYml.text = updated.join(System.lineSeparator())
        println "‚úÖ Updated plugin.yml to version ${project.version}"
    } else {
        println "‚ö†Ô∏è plugin.yml not found, skipping update"
    }

    println "‚úÖ Updated gradle.properties to version ${project.version}"
}

tasks.register('bumpPatchVersion') {
    group = 'bump'
    description = 'Update gradle.properties to a new patch version'
    doLast {
        releaseAction('patch')
    }
}

tasks.register('bumpMinorVersion') {
    group = 'bump'
    description = 'Update gradle.properties to a new minor version'
    doLast {
        releaseAction('minor')
    }
}

tasks.register('bumpMajorVersion') {
    group = 'bump'
    description = 'Update gradle.properties to a new major version'
    doLast {
        releaseAction('major')
    }
}

tasks.register('releasePatchJar') {
    group = "release"
    description = "Full patch release (bump + jar build)"
    dependsOn 'bumpPatchVersion', 'build'
}

tasks.register('releaseMinorJar') {
    group = "release"
    description = "Full minor release (bump + jar build)"
    dependsOn 'bumpMinorVersion', 'build'
}

tasks.register('releaseMajorJar') {
    group = "release"
    description = "Full major release (bump + jar build)"
    dependsOn 'bumpMajorVersion', 'build'
}

tasks.named('build') {
    dependsOn tasks.named('shadowJar')
}
